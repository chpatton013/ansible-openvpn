---
- hosts: all
  vars_files:
  - vars.yaml
  - required_vars.yaml
  tasks:
  - fail: msg="Variable '{{ item }}' is not defined"
    when: item not in hostvars[inventory_hostname]
    with_items: "{{required_vars}}"
  - block: # OpenVPN dependencies
    - name: Install packages
      apt: name={{item}} state=latest update_cache=yes
      with_items:
      - apt-listchanges
      - easy-rsa
      - iptables-persistent
      - openvpn
      - unattended-upgrades
    - name: Create directories
      file: path={{item}} state=directory owner=root group=root mode=0755 recurse=yes
      with_items:
      - etc/apt/apt.conf.d
      - etc/iptables
    - name: Create files
      copy: src={{item}} dest=/{{item}} owner=root group=root mode=0644 force=yes
      with_items:
      - etc/apt/apt.conf.d/20auto-upgrades
      - etc/apt/apt.conf.d/50unattended-upgrades
      - etc/iptables/rules.v6
    - name: Create template files
      template: src={{item}} dest=/{{item}} owner=root group=root mode=0644 force=yes
      with_items:
      - etc/iptables/rules.v4
    - name: Disable IPv6 localhost
      replace:
        dest: /etc/hosts
        regexp: '^(::1\s.*)'
        replace: '# \1'
    - name: Disable IPv6
      sysctl: name={{item.name}} value={{item.value}}
      with_items:
      - name: net.ipv6.conf.all.disable_ipv6
        value: 1
      - name: net.ipv6.conf.default.disable_ipv6
        value: 1
      - name: net.ipv6.conf.{{lo_interface}}.disable_ipv6
        value: 1
      - name: net.ipv6.conf.{{eth_interface}}.disable_ipv6
        value: 1
    - name: Enable IPv4 forwarding
      sysctl: name=net.ipv4.ip_forward value=1
    - name: Reload iptables rules
      shell: "{{item}}"
      with_items:
      # IPv4
      - iptables --flush
      - iptables --delete-chain
      - iptables-restore < /etc/iptables/rules.v4
      # IPv6
      - ip6tables --flush
      - ip6tables --delete-chain
      - ip6tables-restore < /etc/iptables/rules.v6
    become: yes
  - block: # OpenVPN server configuration
    - name: Create openvpn user account
      user:
        createhome: no
        name: "{{openvpn_user_name}}"
        shell: /usr/sbin/nologin
        system: yes
    - name: Make CA dir
      command: "make-cadir {{openvpn_easy_rsa_directory}}"
      args:
        creates: "{{openvpn_easy_rsa_directory}}"
    - name: Remove and re-create keys directory.
      shell: |
        source ./vars
        ./clean-all
      args:
        chdir: "{{openvpn_easy_rsa_directory}}"
        executable: /bin/bash # `source` cannot be run under `/bin/sh`
    - name: Link openssl config
      file:
        state: link
        dest: "{{openvpn_easy_rsa_directory}}/openssl.cnf"
        src: "{{openvpn_easy_rsa_directory}}/openssl-1.0.0.cnf"
    - name: Create template files
      template: src={{item}} dest=/{{item}} owner=root group=root mode=0644 force=yes
      with_items:
      - etc/openvpn/server.conf
      - etc/openvpn/easy-rsa/vars
    - name: Generate HMAC key file
      shell: "openvpn --genkey --secret {{openvpn_keys_directory}}/ta.key"
      args:
        creates: "{{openvpn_keys_directory}}/ta.key"
    - name: Generate DH PEM file
      shell: "openssl dhparam {{openvpn_key_size}} > {{openvpn_dh_pem_file}}"
      args:
        creates: "{{openvpn_dh_pem_file}}"
    - name: Generate certificate and server keys
      shell: |
        source ./vars
        # Run pkitool directly instead of using provided helper scripts to avoid
        # the --interact flag.
        ./pkitool --initca # Create ca.{crt,key}
        ./pkitool --server server # Create server.{crt,csr,key}
      args:
        chdir: "{{openvpn_easy_rsa_directory}}"
        executable: /bin/bash # `source` cannot be run under `/bin/sh`
    become: yes
